import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../styles/Recommendations.css';

const Recommendations = ({ studentId }) => {
    const [recommendations, setRecommendations] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchRecommendations = async () => {
            try {
                const response = await axios.get(`http://localhost:3001/recommendations/${studentId}`);
                setRecommendations(response.data);
                setLoading(false);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
                setLoading(false);
            }
        };

        // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        fetchRecommendations();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        const interval = setInterval(fetchRecommendations, 30 * 60 * 1000);

        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => clearInterval(interval);
    }, [studentId]);

    const handleStartTest = (testId) => {
        window.location.href = `/test/${testId}`;
    };

    const getTypeDetails = (type) => {
        const details = {
            'unfinished': {
                label: '–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç',
                color: '#ED8936',
                icon: '‚úèÔ∏è',
                showButton: true,
                buttonText: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
            },
            'frequency': {
                label: '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                color: '#F6AD55',
                icon: '‚è±Ô∏è',
                showButton: false
            },
            'failed_attempts': {
                label: '–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏',
                color: '#F56565',
                icon: '‚ùå',
                showButton: false
            },
            'average_score': {
                label: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª',
                color: '#4299E1',
                icon: 'üìä',
                showButton: false
            },
            'inactivity': {
                label: '–î–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏',
                color: '#9F7AEA',
                icon: '‚åõ',
                showButton: false
            },
            'weak_topic': {
                label: '–°–ª–∞–±–∞—è —Ç–µ–º–∞',
                color: '#F56565',
                icon: '‚ö†Ô∏è',
                showButton: false
            }
        };
        return details[type] || { label: type, color: '#CBD5E0', icon: '‚ÑπÔ∏è', showButton: false };
    };

    if (loading) {
        return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...</div>;
    }

    return (
        <div className="recommendations-container">
            <div className="recommendations-header">
                <h2>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
            </div>

            {recommendations.length > 0 ? (
                <ul className="recommendations-list">
                    {recommendations.map((rec, index) => {
                        const typeInfo = getTypeDetails(rec.type);
                        return (
                            <li key={index} className="recommendation-item">
                                <div className="recommendation-content">
                                    <p>{rec.message || `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ—Å—Ç #${rec.test_id}`}</p>
                                    {typeInfo.showButton && (
                                        <button
                                            onClick={() => handleStartTest(rec.test_id)}
                                            className="start-button"
                                        >
                                            {typeInfo.buttonText}
                                        </button>
                                    )}
                                </div>
                                <div className="recommendation-type" style={{backgroundColor: typeInfo.color}}>
                                    <span className="type-icon">{typeInfo.icon}</span>
                                    {typeInfo.label}
                                </div>
                            </li>
                        );
                    })}
                </ul>
            ) : (
                <p className="no-recommendations">–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            )}
        </div>
    );
};

export default Recommendations;
